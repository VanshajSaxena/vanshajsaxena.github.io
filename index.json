[{"content":"A Developer, Administrator, and GNU/Linux geek. I am passionate about software, development tools and open-source constantly exploring their boundaries and my own. I learn through documentation, talks, books and articles.\nI like approaching to problem with all non-conventional ways of solution you might not think of.\nContact Me Connect with me on LinkedIn or via email at vanshajsaxena2005@gmail.com.\n","permalink":"https://vanshaj.xyz/about/","summary":"\u003cp\u003eA Developer, Administrator, and GNU/Linux geek. I am passionate about software,\ndevelopment tools and open-source constantly exploring their boundaries and my\nown. I learn through documentation, talks, books and articles.\u003c/p\u003e\n\u003cp\u003eI like approaching to problem with all non-conventional ways of solution you\nmight \u003cem\u003enot\u003c/em\u003e think of.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"contact-me\"\u003eContact Me\u003c/h2\u003e\n\u003cp\u003eConnect with me on \u003ca href=\"https://linkedin.com/in/vanshajxyz\"\u003eLinkedIn\u003c/a\u003e or via email\nat \u003ca href=\"mailto:vanshajsaxena2005@gmail.com\"\u003evanshajsaxena2005@gmail.com\u003c/a\u003e.\u003c/p\u003e","title":"About"},{"content":" Source Code\nAuction Hub is a backend service that is designed to serve a system of online auctions, basically the buying, selling, and bidding of auction items in real time, with a comprehensive focus on security of the application and its scalability.\nProject Structure Using Spring Boot, OpenAPI and eclipse.jdt.ls, the Auction System is designed to be stable, secure and scalable. It follows an API-first approach to allow for its client to know exactly what to expect from the API.\nThe project follows the following structure which allows it to be modular and maintainable to reducing cost of refactoring in future along with a test suit that tests the essential components of the application.\nauction-system/ ├── src/ │ ├── main/ │ │ ├── java/ │ │ │ └── com/ │ │ │ └── auction/ │ │ │ └── system/ # Main application package │ │ │ ├── config/ # Spring Security configuration classes │ │ │ ├── controller/ # API Controllers (delegates to generated interfaces) │ │ │ ├── entity/ # JPA entities │ │ │ ├── exception/ # Custom exception handling │ │ │ ├── filter/ # Request filters (e.g. JWT authentication filter) │ │ │ ├── mapper/ # MapStruct mappers │ │ │ ├── repository/ # Spring Data JPA repositories │ │ │ ├── security/ # Security related components │ │ │ ├── service/ # Business logic interfaces │ │ │ │ └── impl/ # Interface implementations │ │ │ └── AuctionSystemApplication.java # Spring Boot main class │ │ └── resources/ │ │ ├── api/ │ │ │ └── openapi.api-description.yaml # API description file │ │ ├── static/ │ │ ├── templates/ │ │ └── application.yaml # Application properties │ └── test/ # Test sources │ └── java/ │ └── com/ │ └── auction/ │ └── system/ │ ├── service/ │ │ └── impl/ # Service related tests │ └── testutil/ # Test utility classes ├── mvnw # Maven wrapper executable (Linux/MacOS) ├── mvnw.cmd # Maven wrapper executable (Windows) └── pom.xml # Maven Project Object Model OpenAPI It uses OpenAPI spec 3.0.3 to define its contract. The API contract can be viewed interactively either by running the server offline and making a request to the swagger.html endpoint, which redirects to a Swagger UI page running locally. Or my directly inspecting the openapi.api-description.yaml fine in the project source code.\nThis approach allows the consumers of the API to beforehand know what to expect from the API and even generate client stubs for mocking and prototyping, saving time a cost of development.\nThe project workflow involves interacting with OpenAPI description file, if an endpoint needs to be added, the API description file can be updated to reflect that and the server stubs will be generated with openapi-generator during the generate-source phase of Maven default lifecycle.\nSecurity The API is secured using Spring Security with best practices in mind. It uses stateless authentication using JWTs (access_token and id_token). To enable SSO using third-party authorization and openid providers there are callback endpoints like /auth/{provider}/callback that expects an Authorization: Bearer \u0026lt;token\u0026gt; header in the POST request.\nThe security scheme for these endpoints in OpenAPI description file looks like this:\npaths: /auth/google/callback: post: security: - oauth2google: [] /auth/apple/callback: post: security: - oauth2apple: [] components: securitySchemes: bearerAuth: type: http scheme: bearer description: Authorization using JWT issued by the backend. bearerFormat: JWT oauth2google: type: http scheme: bearer description: Authentication using ID Tokens from the Google Authorization Server. bearerFormat: ID Token (Google) oauth2apple: type: http scheme: bearer description: Authentication using ID Tokens from the Apple Authorization Server. bearerFormat: ID Token (Apple) security: - bearerAuth: [] To have a deeper look at the security scheme have a look at the SecurityConfig.java and OAuth2SecurityConfig in the com.auction.system.config package.\nDatabase and ORM The application uses an in-memory H2 database for development, but it can be configured to use any database of the choice (e.g. MySQL).\n# Example configuration for a local MySQL server spring: datasource: url: jdbc:mysql://localhost:3306/auction_system username: test password: password Along with this the proper JDBC driver for the particular database needs to be on the class path for the application to connect to the data source successfully.\n\u0026lt;!-- in project object model (pom.xml) --\u0026gt; \u0026lt;dependencies\u0026gt; \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.mysql\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;mysql-connector-j\u0026lt;/artifactId\u0026gt; \u0026lt;scope\u0026gt;runtime\u0026lt;/scope\u0026gt; \u0026lt;/dependency\u0026gt; \u0026lt;/dependencies\u0026gt; The actual ORM (Object Relational Mapping) framework used in the application is Hibernate, along with Spring Data JPA to reduce effort of directly interacting with Hibernate interface such as Session and EntityManager.\n// Entity class @Entity @Table(name = \u0026#34;users\u0026#34;, uniqueConstraints = { @UniqueConstraint(columnNames = \u0026#34;username\u0026#34;), @UniqueConstraint(columnNames = \u0026#34;email\u0026#34;) }) @AllArgsConstructor @NoArgsConstructor @Getter @Setter @Builder public class UserEntity { // User entity from the application source code @Id @GeneratedValue(strategy = GenerationType.IDENTITY) private Long id; @Column(nullable = false) private String firstName; @Column(nullable = false) private String lastName; @Column(nullable = false) private String username; @Column(nullable = false) // ...more fields } Using Spring Data JPA it is now easy to generate SQL just by defining a UserRepository that extends a JpaRepository.\n// Repository interface @Repository public interface UserRepository extends JpaRepository\u0026lt;UserEntity, Long\u0026gt; { Optional\u0026lt;UserEntity\u0026gt; findByUsername(String username); Optional\u0026lt;UserEntity\u0026gt; findByEmail(String email); } Now the repository can be used like this:\n// Service class @Service @RequiredArgsConstructor public class DefaultUserService implements UserService { // Inject using constructor injection private final UserRepository userRepository; private final UserMapper userMapper; private final PasswordEncoder passwordEncoder; //...methods } ","permalink":"https://vanshaj.xyz/projects/auction-system/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/VanshajSaxena/auction-system\"\u003e\u003cstrong\u003eSource Code\u003c/strong\u003e\u003c/a\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e\u003cstrong\u003eAuction Hub\u003c/strong\u003e is a backend service that is designed to serve a system of online\nauctions, basically the buying, selling, and bidding of auction items in real\ntime, with a comprehensive focus on security of the application and its scalability.\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"project-structure\"\u003eProject Structure\u003c/h2\u003e\n\u003cp\u003eUsing \u003ca href=\"https://spring.io/projects/spring-boot\"\u003eSpring Boot\u003c/a\u003e,\n\u003ca href=\"https://www.openapis.org/what-is-openapi\"\u003eOpenAPI\u003c/a\u003e and\n\u003ca href=\"https://github.com/eclipse-jdtls/eclipse.jdt.ls\"\u003eeclipse.jdt.ls\u003c/a\u003e, the Auction\nSystem is designed to be stable, secure and scalable. It follows an \u003cstrong\u003eAPI-first\u003c/strong\u003e\napproach to allow for its client to know exactly what to expect from the API.\u003c/p\u003e","title":"Auction Hub"},{"content":"Java is the first language I learnt because of its verbosity and acceptance.\nThere are a number of small projects I have worked upon while I was learning:\nA Ticket Booking Service Web Server Proxies Dabbled with AOP Auction Hub These projects have greatly contributed to my fundamental understanding of computer science and software engineering which are foundational for writing backend services.\nApart from these projects I also like to solve Leetcode question and I prepare a separate repo for the problems that I solve on Leetcode.\nDSA ","permalink":"https://vanshaj.xyz/projects/backend-and-java/","summary":"\u003cp\u003eJava is the first language I learnt because of its verbosity and acceptance.\u003c/p\u003e\n\u003cp\u003eThere are a number of small projects I have worked upon while I was learning:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/VanshajSaxena/ticketBookingService\"\u003eA Ticket Booking Service\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/VanshajSaxena/webServerThreadPooled\"\u003eWeb Server\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/VanshajSaxena/springBootProxies\"\u003eProxies\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/VanshajSaxena/springBootAOP\"\u003eDabbled with AOP\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/VanshajSaxena/auction-system\"\u003eAuction Hub\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThese projects have greatly contributed to my fundamental understanding of\ncomputer science and software engineering which are foundational for writing\nbackend services.\u003c/p\u003e\n\u003chr\u003e\n\u003cp\u003eApart from these projects I also like to solve Leetcode question and I prepare\na separate repo for the problems that I solve on Leetcode.\u003c/p\u003e","title":"Backend and Java"},{"content":" User Service source code\nAdmin Service source code\nFable is a Software as a Service (SaaS) Library Management System (LMS) Software.\nI worked on Fable as a part of an Internship at Infosys Limited, Mysuru, which I received through a challenging selection process, I have a post about it, here.\nHere are the videos of the actual developed applications.\nYour browser does not support the video tag. Your browser does not support the video tag. Development Overview The Fable project is subdivided into two application projects, one is for the users and the other is only for library management (mainly librarians) and administrators. I worked as the backend architect and developer.\nUser LMS Layout LMS_User ├── Assets.xcassets # Assets folder ├── CONTRIBUTING.md # Contributing Guide ├── GoogleService-Info.plist # FireBase Integration ├── LMSUser │ ├── Info.plist │ ├── LMSUser.swift │ ├── Models # Models and Entities │ ├── Services # Services that interact with APIs │ └── Views # A lot of SwiftUI Views, basically the UI ├── LMSUser.xcodeproj # XCode specific folder, But I like to tinker in │ ├── project.pbxproj # The project index file used by the source-kit LSP │ ├── project.xcworkspace # Workspace settings, specific to user environment and settings │ │ ├── contents.xcworkspacedata │ └── xcshareddata ├── \u0026#39;Preview Content\u0026#39; │ └── \u0026#39;Preview Assets.xcassets\u0026#39; │ └── Contents.json └── README.md # Readme file The application follows a simple MVVM architecture to structure the source code.\nAdmin Librarian LMS LMS_Admin_Librarian ├── CONTRIBUTING.md ├── GoogleService-Info.plist ├── LMS-Admin-Librarian-Info.plist ├── LMSAdminLibrarian │ ├── Assets.xcassets │ ├── Models # Entities and models │ ├── \u0026#39;Preview Content\u0026#39; │ │ └── \u0026#39;Preview Assets.xcassets\u0026#39; │ │ └── Contents.json │ ├── Services # Services that interact with APIs │ ├── Utilities # Utility classes and functions │ ├── ViewModels # View Models for SwiftUI views │ └── Views # SwiftUI views files ├── LMSAdminLibrarian.xcodeproj # XCode specific folder │ ├── project.pbxproj # Project index required by LSP │ └── project.xcworkspace │ ├── contents.xcworkspacedata │ └── xcshareddata └── README.md # Readme file I mainly worked on the majorly on the Administrator\u0026rsquo;s and Librarian\u0026rsquo;s application. At the time of starting I knew very little about applications programming, I learned through the process of developing and sharing.\nI learned a lot from the project as this was my first project in which I worked with a team of 10 members in an agile-based development process. I also had the responsibility of the Scrum Master for the team.\n","permalink":"https://vanshaj.xyz/projects/fable/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/VanshajSaxena/LMS_User\"\u003eUser Service source code\u003c/a\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/VanshajSaxena/LMS_Admin_Librarian\"\u003eAdmin Service source code\u003c/a\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003eFable is a Software as a Service (SaaS) Library Management System (LMS)\nSoftware.\u003c/p\u003e\n\u003cp\u003eI worked on Fable as a part of an Internship at Infosys Limited,\nMysuru, which I received through a challenging selection process, I have a post\nabout it, \u003ca href=\"/posts/got-selected/\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eHere are the videos of the actual developed applications.\u003c/p\u003e\n\u003chr\u003e\n\n\n\n\n\n\n\n\n  \u003cdiv class=\"align-center\"\u003e\n    \u003cvideo controls width=\"300\" height=\"450\"\u003e\n      \u003csource src=\"/projects/fable/FableForMembersandUsers.mp4\" type=\"video/mp4\"\u003e\n      Your browser does not support the video tag.\n    \u003c/video\u003e\n  \u003c/div\u003e\n\n\n\n\n\n\n\n\n\n\n  \u003cdiv class=\"align-center\"\u003e\n    \u003cvideo controls width=\"600\" height=\"450\"\u003e\n      \u003csource src=\"/projects/fable/FableForAdminsandLibrarians.mp4\" type=\"video/mp4\"\u003e\n      Your browser does not support the video tag.\n    \u003c/video\u003e\n  \u003c/div\u003e\n\n\n\u003chr\u003e\n\u003ch2 id=\"development-overview\"\u003eDevelopment Overview\u003c/h2\u003e\n\u003cp\u003eThe Fable project is subdivided into two application projects, one is for the\nusers and the other is only for library management (mainly librarians) and\nadministrators. I worked as the \u003cstrong\u003ebackend architect\u003c/strong\u003e and \u003cstrong\u003edeveloper\u003c/strong\u003e.\u003c/p\u003e","title":"Fable"},{"content":" Source code\nNixOS is a GNU/Linux distribution that focuses on reproducibility, declarative configuration, and robust package management.\nIf you have ever used GNU/Linux Operating System you must know a large part of maintaining an installation of a Linux Distribution is having to edit some configuration files.\nThe GNU/Linux Operating System is so malleable that you can break it into pieces of independent software and put them back together in a different way, and it would work if done correctly. But this power comes with the responsibility of having to manage the complexity of the underlying system.\nNixOS gives the user the power to handle this complexity in a declarative way. NixOS does this with the use of its purely functional package manager, Nix.\nNix Nix is a powerful package manager for Linux and other Unix systems that makes package management reliable and reproducible.\nSo if you have ever used a package manager like npm, it maintains a lock file that tracks the exact version of the packages you are using in your project. This is to ensure that the project will work the same way on different machines.\nIn a similar fashion Nix Flakes provide a standard way to write Nix expressions (and therefore packages) whose dependencies are version-pinned in a lock file, improving reproducibility of Nix installations.\nBelow is an example of a really simple Nix Flake:\n# flake.nix { description = \u0026#34;A Simple Nix Flake\u0026#34;; # A simple description for the flake outputs = { self }: { packages.x86_64-linux.hello = with import \u0026lt;nixpkgs\u0026gt; {}; hello; }; } This entire file is a Nix expression that evaluates to an attribute set. Looking closely you\u0026rsquo;ll find the expression in itself is an attribute set.\nHere outputs is a function that takes an attribute set as an argument, we are only using one parameter here, self, which is a reference to the current flake.\npackages.x86_64-linux.hello is just a reference to the package hello through the x86_64-linux key contained in the packages attribute set.\nNixOS I faced this problem of traditionally managing the state (packages) of my Linux System imperatively. This always caused conflicts and inconsistencies in my environment in various ways. Also I never knew what state of my system is leading to an issue. It is very hard to pin point it, when you build your system imperatively rather than declaratively.\nNixOS allows you to interact with your operating system programmatically, more specifically you can declare your packages and configurations and build your system like any other software project that you build.\n# /etc/nixos/flake.nix { description = \u0026#34;NixOS System Flake\u0026#34;; # Input to the flake inputs = { nixpkgs-stable.url = \u0026#34;github:NixOS/nixpkgs/nixos-24.11\u0026#34;; nixpkgs-unstable.url = \u0026#34;github:NixOS/nixpkgs/nixos-unstable\u0026#34;; }; # Flake output outputs = { nixpkgs-stable, nixpkgs-unstable, ... }: { # `NIXOS` is hostname here, can be anything nixosConfigurations.NIXOS = nixpkgs-unstable.lib.nixosSystem rec { # Architecture system = \u0026#34;x86_64-linux\u0026#34;; # Used to provide special arguments to the flake output specialArgs = { nixos-stable = import nixpkgs-stable { inherit system; config.allowUnfree = true; }; }; # Nix module to be included in the flake modules = [ ./configuration.nix ]; }; }; } As you see, this is how we define a flake that helps to define our dependencies declaratively, in any project. For this system flake, the dependencies are the packages that we require in our environment.\n# /etc/nixos/home.nix { inputs-from-flake, ... }: { home.username = \u0026#34;vanshaj\u0026#34;; home.homeDirectory = \u0026#34;/home/vanshaj\u0026#34;; home.packages = with inputs-from-flake; [ # Define your dependencies ]; # basic configuration of git programs.git = { enable = true; userName = \u0026#34;Vanshaj Saxena\u0026#34;; userEmail = \u0026#34;vs110405@outlook.com\u0026#34;; }; home.stateVersion = \u0026#34;24.05\u0026#34;; # Let home Manager install and manage itself. programs.home-manager.enable = true; } You can further extend your flake with the module system provided with Nix.\n/etc/nixos ├── configuration.nix -\u0026gt; /home/vanshaj/nixos/configuration.nix ├── flake.lock -\u0026gt; /home/vanshaj/nixos/flake.lock ├── flake.nix -\u0026gt; /home/vanshaj/nixos/flake.nix ├── hardware-configuration.nix -\u0026gt; /home/vanshaj/nixos/hardware-configuration.nix └── home.nix -\u0026gt; /home/vanshaj/nixos/home.nix This makes debugging and maintaining your project much easier. Now, whenever there is a problem in the system you could literally git bisect your system configuration like a traditional software.\nNot only Nix allows to you build declaratively, it guarantees reproducibility and easy rollbacks.\nThis immutability and reproducibility is the cause I use Nix for my projects and my system.\n","permalink":"https://vanshaj.xyz/projects/nix-and-nixos/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/VanshajSaxena/nixos-config\"\u003eSource code\u003c/a\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e\u003ca href=\"https://nixos.org/\"\u003eNixOS\u003c/a\u003e is a GNU/Linux distribution that focuses on\nreproducibility, declarative configuration, and robust package management.\u003c/p\u003e\n\u003cp\u003eIf you have ever used GNU/Linux Operating System you must know a large part of\nmaintaining an installation of a Linux Distribution is having to edit some\nconfiguration files.\u003c/p\u003e\n\u003cp\u003eThe GNU/Linux Operating System is so malleable that you can break it into\npieces of independent software and put them back together in a different way,\nand it would work if done correctly. But this power comes with the\nresponsibility of having to manage the complexity of the underlying system.\u003c/p\u003e","title":"Nix and NixOS"},{"content":" Source Code\nMy first team project was CareNote.\nIt was in intense journey to first come up with a problem that has some meaning and is relevant to at least some people. Then develop the actual solution that can solve this real problem in the real world.\nBefore this I had always wrote small programs that only served me, mainly in configuring my development experience in Neovim, which is a small project in itself maintained by me.\nHere are some of the screenshots of the prototype which I with my teammates designed.\nI could not provide the screenshots of the actual application as I do not own a Mac or an iPhone (so I could build locally) and the few screenshots I took that time have been lost unfortunately.\nBut you can have a look at the source code if you want to dive deep,\nThese are only the prototype screenshots, we were able to make similar UIs but due being new to Swift and UIKit at that time it was a learning experience.\n","permalink":"https://vanshaj.xyz/projects/carenote/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/VanshajSaxena/CareNote\"\u003eSource Code\u003c/a\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003eMy first team project was \u003cstrong\u003eCareNote\u003c/strong\u003e.\u003c/p\u003e\n\u003cp\u003eIt was in intense journey to first come up\nwith a problem that has some meaning and is relevant to at least some people.\nThen develop the actual solution that can solve \u003cem\u003ethis real problem in the real\nworld\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003eBefore this I had always wrote small programs that only served me, mainly in\nconfiguring my development experience in \u003ca href=\"/projects/neovim/\"\u003eNeovim\u003c/a\u003e, which is a small project in itself maintained by me.\u003c/p\u003e","title":"CareNote"},{"content":" Source Code\nNeovim is a hyperextensible modal text editor based on Vim.\nI started using Vim during the first year of my engineering and instantly knew it is an incredible tool. I new use vim keybinding in everything that I do, from text editing to browsing the web.\nNeovim is highly configurable and extensible, this is one of its qualities among others. It is configured using a simple language called Lua.\nLua is a powerful, efficient, lightweight, embeddable scripting language. It supports procedural programming, object-oriented programming, functional programming, data-driven programming, and data description.\nI started to learn Lua in my free time and became quite familiar with it very quickly. The language is so simple that it has only a single data structure, tables. A single data structure to rule them all.\nSince I first started using Neovim I maintained my own Neovim configuration, building it from scratch and rewriting it, several times. This was in itself a spiritual process in my programming journey.\nMotivation Neovim puts you in a place where you control every aspect of your development process and environment, moreover it gives you the opportunity to learn about the tools and dependencies essential for your project. This is the primary reason I use Neovim as my main text editor.\nStructure Here\u0026rsquo;s the structure of my Neovim configuration:\nnvim ├── hyperfine.out ├── init.lua ├── lazy-lock.json ├── lazyvim.json ├── LICENSE ├── lua │ ├── config │ │ ├── autocmds.lua │ │ ├── keymaps.lua │ │ ├── options.lua │ │ └── startup.lua │ └── plugins │ ├── coding.lua │ ├── colorscheme.lua │ ├── disabled.lua │ ├── editor.lua │ ├── extras.lua │ ├── lsp │ │ ├── core.lua │ │ └── utils.lua │ ├── overrides.lua │ ├── tools.lua │ └── ui.lua └── stylua.toml This has evolved so much since I first started.\nI now have moved to using Neovim Distributions as they provide structured API through which I can extend further and save some time for other projects. Maintaining a Neovim configurable is sometimes so time taking that you get to have very little time for other projects that you work upon.\n","permalink":"https://vanshaj.xyz/projects/neovim/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/VanshajSaxena/nvim\"\u003eSource Code\u003c/a\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003e\u003ca href=\"https://neovim.io/\"\u003e\u003cstrong\u003eNeovim\u003c/strong\u003e\u003c/a\u003e is a hyperextensible modal text editor based\non Vim.\u003c/p\u003e\n\u003cp\u003eI started using Vim during the first year of my engineering and instantly knew\nit is an incredible tool. I new use vim keybinding in everything that I do,\nfrom text editing to browsing the web.\u003c/p\u003e\n\u003cp\u003eNeovim is highly configurable and extensible, this is one of its qualities\namong others. It is configured using a simple language called\n\u003ca href=\"https://www.lua.org/about.html\"\u003eLua\u003c/a\u003e.\u003c/p\u003e","title":"Neovim"},{"content":"Neorg is a note-taking software used to take structured notes, project and task management, time tracking, writing typeset documents and more.\nIt uses norg file format, which is based on plain text format, and is easy to use and read, still being very powerful. The norg file specification is open-source and anyone can build and extend upon it. It is like a fusion of the simplicity of markdown with the feature set of org-mode.\nBecause of this simplicity I have used it in the past to document by learnings and embraced its task management features.\nAlthough technically not a software, but it is something that I maintain regularly. That\u0026rsquo;s why I created this post.\nMy notes can be found here.\nThese encompasses all the concepts that I don\u0026rsquo;t want to forget later. So I document them structurally. Neorg and Neovim both gives tools to efficiently search and query through these notes.\n","permalink":"https://vanshaj.xyz/projects/neorg-and-notes/","summary":"\u003cp\u003e\u003ca href=\"https://github.com/nvim-neorg/neorg\"\u003eNeorg\u003c/a\u003e is a note-taking software used to\ntake structured notes, project and task management, time tracking, writing\ntypeset documents and more.\u003c/p\u003e\n\u003cp\u003eIt uses \u003ccode\u003enorg\u003c/code\u003e file format, which is based on plain text format, and is easy to\nuse and read, still being very powerful. The \u003ccode\u003enorg\u003c/code\u003e file specification is\n\u003ca href=\"https://github.com/nvim-neorg/norg-specs\"\u003eopen-source\u003c/a\u003e and anyone can build\nand extend upon it. It is like a fusion of the simplicity of markdown with the\nfeature set of org-mode.\u003c/p\u003e","title":"Neorg and Notes"},{"content":" Source code\nThis site is built with Hugo.\nThis allowed me to showcase my projects and my thoughts to you. The site has a really simple hierarchical structure, supporting blogs and project posts.\nWriting a simple blog post Writing a simple blog post like this involves simply creating a markdown file with specific archetype in the posts directory. Or you can use Hugo binary to create a new post.\nvanshaj@NIXOS ~/ (master+*) $ hugo new content /path/to/post Then simply writing the post is all you need to do.\nStructure vanshaj@NIXOS ~/code/websites/vanshaj-saxena (master+*) $ exa --tree . ├── archetypes ├── assets # can have asstes like css, js, images ├── config │ ├── _default # default settings │ │ ├── hugo.yaml │ │ └── params.yaml │ └── production # production settings │ └── params.yaml ├── content # This is the content directory to write posts │ ├── _index.md │ ├── about.md │ ├── archives.md │ ├── posts │ │ ├── _index.md │ │ ├── bootcamp.md │ │ └── got-selected.md │ ├── projects │ │ ├── _index.md │ │ ├── carenote │ │ ├── fable │ │ ├── neovim │ │ ├── nix-and-nixos │ │ └── this-site │ └── search.md ├── data ├── i18n ├── layouts │ └── shortcodes ├── public # public site ├── resources ├── static # static diretory for files that are simply copied over to public/ └── themes # themes ","permalink":"https://vanshaj.xyz/projects/this-site/","summary":"\u003cblockquote\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/VanshajSaxena/vanshaj-saxena-hugo\"\u003eSource code\u003c/a\u003e\u003c/p\u003e\u003c/blockquote\u003e\n\u003cp\u003eThis site is built with \u003ca href=\"https://gohugo.io/\"\u003eHugo\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eThis allowed me to showcase my projects and my thoughts to you. The site has a\nreally simple hierarchical structure, supporting \u003ca href=\"/posts/\"\u003eblogs\u003c/a\u003e\nand project posts.\u003c/p\u003e\n\u003chr\u003e\n\u003ch3 id=\"writing-a-simple-blog-post\"\u003eWriting a simple blog post\u003c/h3\u003e\n\u003cp\u003eWriting a simple blog post like this involves simply creating a\n\u003ca href=\"https://www.markdownguide.org/\"\u003emarkdown\u003c/a\u003e file with specific archetype in the\nposts directory. Or you can use Hugo binary to create a new post.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003evanshaj@NIXOS ~/ \u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003emaster+*\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e $ hugo new content /path/to/post\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThen simply writing the post is all you need to do.\u003c/p\u003e","title":"This Site"},{"content":" The Selection On the day of January 29, 2024 I was selected for a semester wide program powered by Infosys and Apple for iOS development.\nThe Bootcamp was a tremendous experience. Out of around 900 students, 100 students were selected.\nThis marked a new beginning for my full-day college schedule, which I had been following for the past 2 years. What was about to come proved even challenging than what I had anticipated.\nThe Program Earlier in the Bootcamp, I teamed up with a friend of mine as it was only allowed to have two members in a team. But this time it was different. We were instructed to form a team of four members, each with a different skill set.\nI readily formed a team with the people I had met during the camp and we named our team SAVY. Each of our initial represented in the name of our team.\nOur task was to design and develop an iOS application that could solve at least one real-world problem, we were given 5 months to come up with our solution.\n","permalink":"https://vanshaj.xyz/posts/got-selected/","summary":"\u003chr\u003e\n\u003ch2 id=\"the-selection\"\u003eThe Selection\u003c/h2\u003e\n\u003cp\u003eOn the day of January 29, 2024 I was selected for a semester wide program\npowered by \u003cstrong\u003eInfosys\u003c/strong\u003e and \u003cstrong\u003eApple\u003c/strong\u003e for iOS development.\u003c/p\u003e\n\u003cp\u003eThe \u003ca href=\"/posts/bootcamp/\"\u003eBootcamp\u003c/a\u003e was a tremendous experience.\nOut of around 900 students, 100 students were selected.\u003c/p\u003e\n\u003cp\u003eThis marked a new beginning for my full-day college schedule, which I had been\nfollowing for the past 2 years. What was about to come proved even challenging\nthan what I had anticipated.\u003c/p\u003e","title":"Got Selected"},{"content":" During the last week of December 2024, I signed up for a Bootcamp at my college designed to select students from the Computer Science and Engineering (CSE) branch for a semester-long program. This experience marked a new chapter in how I would spend my time in college. I was eager to learn new concepts and gain insights into industry standards.\nThe week-long Bootcamp was an intense assessment of my knowledge across various domains, and I genuinely enjoyed it. Additionally, I made some friends during this time, and we still keep in touch today.\n","permalink":"https://vanshaj.xyz/posts/bootcamp/","summary":"\u003chr\u003e\n\u003cp\u003eDuring the last week of December 2024, I signed up for a Bootcamp at my college\ndesigned to select students from the Computer Science and Engineering (CSE)\nbranch for a semester-long program. This experience marked a new chapter in how\nI would spend my time in college. I was eager to learn new concepts and gain\ninsights into industry standards.\u003c/p\u003e\n\u003cp\u003eThe week-long Bootcamp was an intense assessment of my knowledge across various\ndomains, and I genuinely enjoyed it. Additionally, I made some friends during\nthis time, and we still keep in touch today.\u003c/p\u003e","title":"Bootcamp"}]